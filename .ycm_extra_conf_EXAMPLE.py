import os
import ycm_core
import glob

flags = [
  '-Wall',
  '-Wextra',
  '-Werror',
  '-Wpedantic',
  '-std=c++11',
  '-x',
  'c++',

  # C++ headers
  '-isystem',
  '/usr/include/c++/4.8.1/',

  # System includes
  '-isystem',
  '/usr/include/',
  '-isystem',
  '/usr/local/include',

  # Eigen
  '-isystem',
  '/usr/include/eigen3',

  # PCL
  '-isystem',
  '/usr/include/pcl-1.7',

  # OpenCV
  '-isystem',
  '/usr/include/opencv',
  '-isystem',
  '/usr/include/opencv2',
]

#Recursively add flags in flagsrec
ros_workspace = 'toolkits'
flags_rec = [
'/home/erik/Git/' + ros_workspace + '/src/*/include',  # ROS WS
'/opt/ros/hydro/include',                              # ROS third party
]

def AddDirsRecursively( flags_rec ):

  global flags
  new_flags = []
  for flag in flags_rec:
    for d in glob.glob(flag) :
      if os.path.isdir(d):
            new_flags.append('-I')
            new_flags.append(d)

  flags += new_flags

AddDirsRecursively( flags_rec )


compilation_database_folder = ''

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
#The compilation_commands.json file generated by CMake does not have entries
#for header files.So we do our best by asking the db for flags for a
#corresponding source file, if any.If one exists, the flags for that file
#should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
#Bear in mind that compilation_info.compiler_flags_ does NOT return a
#python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
  'flags' : final_flags, 'do_cache' : True
}
